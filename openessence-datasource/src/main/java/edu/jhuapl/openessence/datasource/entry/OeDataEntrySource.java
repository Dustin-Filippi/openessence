/*
 * Copyright (c) 2013 The Johns Hopkins University/Applied Physics Laboratory
 *                             All rights reserved.
 *
 * This material may be used, modified, or reproduced by or for the U.S.
 * Government pursuant to the rights granted under the clauses at
 * DFARS 252.227-7013/7014 or FAR 52.227-14.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * NO WARRANTY.   THIS MATERIAL IS PROVIDED "AS IS."  JHU/APL DISCLAIMS ALL
 * WARRANTIES IN THE MATERIAL, WHETHER EXPRESS OR IMPLIED, INCLUDING (BUT NOT
 * LIMITED TO) ANY AND ALL IMPLIED WARRANTIES OF PERFORMANCE,
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT OF
 * INTELLECTUAL PROPERTY RIGHTS. ANY USER OF THE MATERIAL ASSUMES THE ENTIRE
 * RISK AND LIABILITY FOR USING THE MATERIAL.  IN NO EVENT SHALL JHU/APL BE
 * LIABLE TO ANY USER OF THE MATERIAL FOR ANY ACTUAL, INDIRECT,
 * CONSEQUENTIAL, SPECIAL OR OTHER DAMAGES ARISING FROM THE USE OF, OR
 * INABILITY TO USE, THE MATERIAL, INCLUDING, BUT NOT LIMITED TO, ANY DAMAGES
 * FOR LOST PROFITS.
 */

package edu.jhuapl.openessence.datasource.entry;

import edu.jhuapl.openessence.datasource.Dimension;
import edu.jhuapl.openessence.datasource.OeDataSource;
import edu.jhuapl.openessence.datasource.OeDataSourceAccessException;

import java.util.Collection;
import java.util.List;
import java.util.Map;

/**
 * A DataEntrySource is used for CRUD behaviors.
 */

public interface OeDataEntrySource extends OeDataSource {

    /**
     * Gets the set of auto-generated dimensions for this data source.
     *
     * @return The set of auto-generated dimensions.
     */
    public Collection<Dimension> getAutoGeneratedDimensions();

    /**
     * Gets a auto-generated dimension, given that dimension's id.
     *
     * @param id The edit dimension's id.
     * @return The requested edit dimension, or null if no such dimension exists.
     */
    public Dimension getAutoGeneratedDimension(String id);

    /**
     * Gets the set of edit dimensions for this data source.
     *
     * @return The set of edit dimensions.
     */
    public Collection<Dimension> getEditDimensions();

    /**
     * Gets collection of ALL edit dimensions for this data source--all parent and children editable dimensions
     *
     * @return The total collection of parent and child edit dimensions.
     */
    public Collection<Dimension> getAllEditDimensions();

    /**
     * Gets a edit dimension, given that dimension's id.
     *
     * @param id The edit dimension's id.
     * @return The requested edit dimension, or null if no such dimension exists.
     */
    public Dimension getEditDimension(String id);

    /**
     * Gets map of ChildTableDetails for all children tables associated to the datasource
     *
     * @return Map of Child table Details. The key is the childtable name
     */
    public Map<String, ChildTableDetails> getChildTableMap();

    /**
     * Gets ParentTableDetails for the datasource
     *
     * @return ParentTableDetails
     */
    public ParentTableDetails getParentTableDetails();

    /**
     * Gets table name for the Master table associated with this data entry source
     *
     * @return Table name for the master (parent) table
     */
    public String getTableName();

    /**
     * Inserts a CompleteRecord into the database. Because this method is also used for updating records,
     * ignoreSpecialSql ensures that auto-generated values do not overwrite the specialsqldimension values.
     *
     * @param completeRecord   the CompleteRecord to insert
     * @param ignoreSpecialSql the flag to ignore specialSql definitions in the groovy def file. In general, set false
     *                         during add* and set true during update*
     * @return Map of the generated primary key dimension Ids and values
     * @throws edu.jhuapl.openessence.datasource.OeDataSourceAccessException
     *          if there is a problem executing the insert statement.
     */
    public Map addCompleteRecord(CompleteRecord completeRecord, boolean ignoreSpecialSql)
            throws OeDataSourceAccessException;

    /**
     * Gets a Complete record for the JdbcDataEntrySource's pre-configured master table. Also returns the children
     * tables of interest specified by the childrenTableNames
     *
     * @param recordPks          Primary keys for the parent record
     * @param childrenTableNames the list of child tablenames to also retrieve
     * @return a CompleteRecord that holds the Parent record and specified child records for the passed in primary keys
     * @throws edu.jhuapl.openessence.datasource.OeDataSourceAccessException
     *          if there is a problem executing the select query.
     */
    public CompleteRecord getCompleteRecord(DbKeyValMap recordPks, List<String> childrenTableNames)
            throws OeDataSourceAccessException;

    /**
     * Update existing record in the database(having the specified pk values) with the values of the input
     * completeRecord
     *
     * @param recordPks         Primary keys for the complete record to update
     * @param replacementRecord the replacement CompleteRecord to update the original database record
     * @throws edu.jhuapl.openessence.datasource.OeDataSourceAccessException
     *          if there is a problem executing the update statement.
     */
    public void updateCompleteRecord(DbKeyValMap recordPks, CompleteRecord replacementRecord)
            throws OeDataSourceAccessException;

    /**
     * Deletes complete record with the matching primary keys
     *
     * @param recordPks primary keys
     * @throws edu.jhuapl.openessence.datasource.OeDataSourceAccessException
     *          if there is a problem executing the delete statement.
     */
    public void deleteCompleteRecord(DbKeyValMap recordPks) throws OeDataSourceAccessException;

    /**
     * Deletes children records with the matching primary keys
     *
     * @param pkIdsValueMap primary keys
     * @param tableName     the target childtable for the delete action
     * @throws edu.jhuapl.openessence.datasource.OeDataSourceAccessException
     *          if there is a problem executing the delete statement.
     */
    public void deleteQueryRecord(DbKeyValMap pkIdsValueMap, String tableName) throws OeDataSourceAccessException;


}
